{
	"info": {
		"_postman_id": "e2f7a9b3-4567-4321-9876-1234abcdef56",
		"name": "E-Commerce API - Fixed Flow",
		"description": "A collection for testing the E-Commerce API endpoints with proper admin setup and dynamic data",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Create Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseCode = pm.response.code;",
									"console.log('Admin user creation response status:', responseCode);",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"if (responseCode === 201) {",
									"    pm.test(\"Admin user created successfully\", function () {",
									"        pm.response.to.have.status(201);",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('id');",
									"        pm.expect(jsonData).to.have.property('email');",
									"        console.log('✅ Admin user created with ID:', jsonData.id);",
									"    });",
									"} else if (responseCode === 400) {",
									"    pm.test(\"Admin user already exists (expected)\", function () {",
									"        pm.response.to.have.status(400);",
									"        console.log('⚠️ Admin user already exists (acceptable for testing)');",
									"    });",
									"} else {",
									"    console.log('❌ Unexpected response code:', responseCode);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@test.com\",\n    \"first_name\": \"Admin\",\n    \"last_name\": \"User\",\n    \"password\": \"adminpass123\",\n    \"phone_number\": \"+1234567890\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/register/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"register",
								""
							]
						}
					}
				},
				{
					"name": "Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Response contains tokens\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access');",
									"    pm.expect(jsonData).to.have.property('refresh');",
									"    ",
									"    pm.environment.set('access_token', jsonData.access);",
									"    pm.environment.set('refresh_token', jsonData.refresh);",
									"    console.log('✅ Admin logged in successfully');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@test.com\",\n    \"password\": \"adminpass123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login",
								""
							]
						}
					}
				},
				{
					"name": "Create Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Category created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('slug');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    ",
									"    pm.environment.set('category_id', jsonData.id);",
									"    pm.environment.set('category_slug', jsonData.slug);",
									"    console.log('✅ Category created with slug:', jsonData.slug);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Category\",\n    \"description\": \"Category for API testing\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/categories/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"categories",
								""
							]
						}
					}
				},
				{
					"name": "Create Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Product created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('slug');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('price');",
									"    ",
									"    pm.environment.set('product_id', jsonData.id);",
									"    pm.environment.set('product_slug', jsonData.slug);",
									"    console.log('✅ Product created with slug:', jsonData.slug);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const categoryId = pm.environment.get('category_id');",
									"if (categoryId) {",
									"    var requestBody = JSON.parse(pm.request.body.raw);",
									"    requestBody.category = parseInt(categoryId);",
									"    pm.request.body.raw = JSON.stringify(requestBody);",
									"    console.log('Using category ID:', categoryId);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Product\",\n    \"category\": 1,\n    \"description\": \"A test product for API testing\",\n    \"price\": 29.99,\n    \"stock\": 100,\n    \"is_available\": true,\n    \"is_featured\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/products/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products",
								""
							]
						}
					}
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "List Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Response is valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"    pm.expect(jsonData.results).to.be.an('array');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/products/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products",
								""
							]
						}
					}
				},
				{
					"name": "Get Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Response contains product details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('price');",
									"    pm.expect(jsonData).to.have.property('slug');",
									"});",
									"",
									"pm.test(\"Price is a number\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(parseFloat(jsonData.price)).to.be.a('number');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const productSlug = pm.environment.get('product_slug');",
									"if (productSlug) {",
									"    pm.request.url = pm.request.url.toString().replace('{{product_slug}}', productSlug);",
									"    console.log('Using product slug:', productSlug);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/products/{{product_slug}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products",
								"{{product_slug}}",
								""
							]
						}
					}
				},
				{
					"name": "Update Product (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Product updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name).to.include('Updated');",
									"});",
									"",
									"pm.test(\"Updated price is valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(parseFloat(jsonData.price)).to.be.a('number');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const productSlug = pm.environment.get('product_slug');",
									"const categoryId = pm.environment.get('category_id');",
									"",
									"if (productSlug) {",
									"    pm.request.url = pm.request.url.toString().replace('{{product_slug}}', productSlug);",
									"}",
									"",
									"if (categoryId) {",
									"    var requestBody = JSON.parse(pm.request.body.raw);",
									"    requestBody.category = parseInt(categoryId);",
									"    pm.request.body.raw = JSON.stringify(requestBody);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Product Updated\",\n    \"category\": 1,\n    \"description\": \"An updated test product\",\n    \"price\": 39.99,\n    \"stock\": 95,\n    \"is_available\": true,\n    \"is_featured\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/products/{{product_slug}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products",
								"{{product_slug}}",
								""
							]
						}
					}
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "List Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Response is valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"    pm.expect(jsonData.results).to.be.an('array');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/categories/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"categories",
								""
							]
						}
					}
				},
				{
					"name": "Get Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Response contains category details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('slug');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const categorySlug = pm.environment.get('category_slug');",
									"if (categorySlug) {",
									"    pm.request.url = pm.request.url.toString().replace('{{category_slug}}', categorySlug);",
									"    console.log('Using category slug:', categorySlug);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/categories/{{category_slug}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"categories",
								"{{category_slug}}",
								""
							]
						}
					}
				}
			]
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "Get Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Response is valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('items');",
									"    pm.expect(jsonData.items).to.be.an('array');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/cart/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"cart",
								""
							]
						}
					}
				},
				{
					"name": "Add Item to Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Item added to cart successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('product');",
									"    pm.expect(jsonData).to.have.property('quantity');",
									"    ",
									"    pm.environment.set('cart_item_id', jsonData.id);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const productId = pm.environment.get('product_id');",
									"if (productId) {",
									"    var requestBody = JSON.parse(pm.request.body.raw);",
									"    requestBody.product = parseInt(productId);",
									"    pm.request.body.raw = JSON.stringify(requestBody);",
									"    console.log('Using product ID:', productId);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"product\": 1,\n    \"quantity\": 2\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/cart-items/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"cart-items",
								""
							]
						}
					}
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "List Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Response is valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"    pm.expect(jsonData.results).to.be.an('array');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/orders/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders",
								""
							]
						}
					}
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Delete Product (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"No content in response body\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});",
									"",
									"pm.test(\"Clean up environment variables\", function () {",
									"    pm.environment.unset('product_id');",
									"    pm.environment.unset('product_slug');",
									"    console.log('✅ Cleaned up product variables');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const productSlug = pm.environment.get('product_slug');",
									"if (productSlug) {",
									"    pm.request.url = pm.request.url.toString().replace('{{product_slug}}', productSlug);",
									"    console.log('Deleting product with slug:', productSlug);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/products/{{product_slug}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products",
								"{{product_slug}}",
								""
							]
						}
					}
				},
				{
					"name": "Delete Category (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"No content in response body\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});",
									"",
									"pm.test(\"Clean up environment variables\", function () {",
									"    pm.environment.unset('category_id');",
									"    pm.environment.unset('category_slug');",
									"    pm.environment.unset('access_token');",
									"    pm.environment.unset('refresh_token');",
									"    console.log('✅ Cleaned up all test variables');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const categorySlug = pm.environment.get('category_slug');",
									"if (categorySlug) {",
									"    pm.request.url = pm.request.url.toString().replace('{{category_slug}}', categorySlug);",
									"    console.log('Deleting category with slug:', categorySlug);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/categories/{{category_slug}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"categories",
								"{{category_slug}}",
								""
							]
						}
					}
				}
			]
		}
	]
} 